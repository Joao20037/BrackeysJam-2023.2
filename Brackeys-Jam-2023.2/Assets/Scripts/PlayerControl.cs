//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""PlayerControlMovement"",
            ""id"": ""fb5bfded-fa85-4bd0-9a4d-d9f432618ec6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c38f5902-4221-4bcc-b08c-c07d9f05ebd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b21adb03-0cbc-4e47-9176-9332aca41d8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbrirCatalogo"",
                    ""type"": ""Button"",
                    ""id"": ""caccaaf5-cea1-4dd2-90ac-5918a36bd720"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ComputeWASD"",
                    ""id"": ""421965c6-a199-43a3-851c-6ee01e9544d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""77403b7d-bf4a-43af-82ba-b1aa3e8aa95d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39f25227-8e09-461e-a0a4-ef0375f70b10"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8a7fa6c2-904d-4da6-b190-d4bbe4d522db"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24026ca3-ae00-4590-944c-faa5f3be00a0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""279d2d94-7dc1-48b2-b484-64f3f513efbd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbrirCatalogo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SubmarinoControl"",
            ""id"": ""2529ce52-d42b-42a9-843c-406544ba4360"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""40683fcc-5d78-4dff-ba42-a6bf9d61ffdb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ComputeWASD"",
                    ""id"": ""cffcc6d3-7bb6-4330-b26d-517e7cbaeb3e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""769efc7a-7f89-48f2-bde5-81fd482b018b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1f833986-d000-45c4-a430-2ca4b7e55a09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1f05232-fa88-4a88-aefc-3cc8bc52fd3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9d8490a-4070-42b2-83e1-a51ccb68c5aa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""EnterSubmarino"",
            ""id"": ""9aff051f-6d4e-4f95-84ec-100c91fb436f"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""c0615115-d2c5-4efe-bb2f-75db8016eeaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap(duration=1.01)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40959290-3956-4ddd-8763-8bc374e512a0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControlMovement
        m_PlayerControlMovement = asset.FindActionMap("PlayerControlMovement", throwIfNotFound: true);
        m_PlayerControlMovement_Move = m_PlayerControlMovement.FindAction("Move", throwIfNotFound: true);
        m_PlayerControlMovement_Jump = m_PlayerControlMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerControlMovement_AbrirCatalogo = m_PlayerControlMovement.FindAction("AbrirCatalogo", throwIfNotFound: true);
        // SubmarinoControl
        m_SubmarinoControl = asset.FindActionMap("SubmarinoControl", throwIfNotFound: true);
        m_SubmarinoControl_Move = m_SubmarinoControl.FindAction("Move", throwIfNotFound: true);
        // EnterSubmarino
        m_EnterSubmarino = asset.FindActionMap("EnterSubmarino", throwIfNotFound: true);
        m_EnterSubmarino_Enter = m_EnterSubmarino.FindAction("Enter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControlMovement
    private readonly InputActionMap m_PlayerControlMovement;
    private IPlayerControlMovementActions m_PlayerControlMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerControlMovement_Move;
    private readonly InputAction m_PlayerControlMovement_Jump;
    private readonly InputAction m_PlayerControlMovement_AbrirCatalogo;
    public struct PlayerControlMovementActions
    {
        private @InputControls m_Wrapper;
        public PlayerControlMovementActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControlMovement_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerControlMovement_Jump;
        public InputAction @AbrirCatalogo => m_Wrapper.m_PlayerControlMovement_AbrirCatalogo;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlMovementActions instance)
        {
            if (m_Wrapper.m_PlayerControlMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnJump;
                @AbrirCatalogo.started -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnAbrirCatalogo;
                @AbrirCatalogo.performed -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnAbrirCatalogo;
                @AbrirCatalogo.canceled -= m_Wrapper.m_PlayerControlMovementActionsCallbackInterface.OnAbrirCatalogo;
            }
            m_Wrapper.m_PlayerControlMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @AbrirCatalogo.started += instance.OnAbrirCatalogo;
                @AbrirCatalogo.performed += instance.OnAbrirCatalogo;
                @AbrirCatalogo.canceled += instance.OnAbrirCatalogo;
            }
        }
    }
    public PlayerControlMovementActions @PlayerControlMovement => new PlayerControlMovementActions(this);

    // SubmarinoControl
    private readonly InputActionMap m_SubmarinoControl;
    private ISubmarinoControlActions m_SubmarinoControlActionsCallbackInterface;
    private readonly InputAction m_SubmarinoControl_Move;
    public struct SubmarinoControlActions
    {
        private @InputControls m_Wrapper;
        public SubmarinoControlActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SubmarinoControl_Move;
        public InputActionMap Get() { return m_Wrapper.m_SubmarinoControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SubmarinoControlActions set) { return set.Get(); }
        public void SetCallbacks(ISubmarinoControlActions instance)
        {
            if (m_Wrapper.m_SubmarinoControlActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SubmarinoControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SubmarinoControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SubmarinoControlActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_SubmarinoControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public SubmarinoControlActions @SubmarinoControl => new SubmarinoControlActions(this);

    // EnterSubmarino
    private readonly InputActionMap m_EnterSubmarino;
    private IEnterSubmarinoActions m_EnterSubmarinoActionsCallbackInterface;
    private readonly InputAction m_EnterSubmarino_Enter;
    public struct EnterSubmarinoActions
    {
        private @InputControls m_Wrapper;
        public EnterSubmarinoActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Enter => m_Wrapper.m_EnterSubmarino_Enter;
        public InputActionMap Get() { return m_Wrapper.m_EnterSubmarino; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnterSubmarinoActions set) { return set.Get(); }
        public void SetCallbacks(IEnterSubmarinoActions instance)
        {
            if (m_Wrapper.m_EnterSubmarinoActionsCallbackInterface != null)
            {
                @Enter.started -= m_Wrapper.m_EnterSubmarinoActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_EnterSubmarinoActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_EnterSubmarinoActionsCallbackInterface.OnEnter;
            }
            m_Wrapper.m_EnterSubmarinoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
            }
        }
    }
    public EnterSubmarinoActions @EnterSubmarino => new EnterSubmarinoActions(this);
    public interface IPlayerControlMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAbrirCatalogo(InputAction.CallbackContext context);
    }
    public interface ISubmarinoControlActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IEnterSubmarinoActions
    {
        void OnEnter(InputAction.CallbackContext context);
    }
}
